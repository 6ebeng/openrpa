<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activity_click_to_view" xml:space="preserve">
    <value>Click to view</value>
  </data>
  <data name="activity_displayname" xml:space="preserve">
    <value>Displayname</value>
  </data>
  <data name="activity_displayname_help" xml:space="preserve">
    <value>Displayname inside the workflow designer</value>
  </data>
  <data name="activity_drop_hint" xml:space="preserve">
    <value>Drop activity</value>
  </data>
  <data name="activity_getelement_drop_hint" xml:space="preserve">
    <value>Drop activity</value>
  </data>
  <data name="activity_gettext" xml:space="preserve">
    <value>Get Text</value>
  </data>
  <data name="activity_gettext_field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="activity_gettext_field_help" xml:space="preserve">
    <value>Get text by field ( input field )</value>
  </data>
  <data name="activity_gettext_result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="activity_gettext_result_help" xml:space="preserve">
    <value>Resulting text from field or string</value>
  </data>
  <data name="activity_gettext_string" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="activity_gettext_string_help" xml:space="preserve">
    <value>Get by string field</value>
  </data>
  <data name="activity_gettext_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_gettext_timeout_help" xml:space="preserve">
    <value>Timeout while waiting on field or string to appear</value>
  </data>
  <data name="activity_gettext_tooltip" xml:space="preserve">
    <value>Get Text by field or string index</value>
  </data>
  <data name="activity_gettext_waitforkeyboard" xml:space="preserve">
    <value>Wait for Keyboard</value>
  </data>
  <data name="activity_gettext_waitforkeyboard_help" xml:space="preserve">
    <value>If true, will wait for keyboard to be unlocked before getting text</value>
  </data>
  <data name="activity_open_recorder" xml:space="preserve">
    <value>Open Recorder</value>
  </data>
  <data name="activity_recorder" xml:space="preserve">
    <value>Recorder</value>
  </data>
  <data name="activity_sendkey" xml:space="preserve">
    <value>Send Key</value>
  </data>
  <data name="activity_sendkey_key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="activity_sendkey_key_help" xml:space="preserve">
    <value>Key to send to terminal</value>
  </data>
  <data name="activity_sendkey_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_sendkey_timeout_help" xml:space="preserve">
    <value>Timeout while waiting for keyboard ready</value>
  </data>
  <data name="activity_sendkey_tooltip" xml:space="preserve">
    <value>Send specific Key to terminal</value>
  </data>
  <data name="activity_sendkey_waitforkeyboard" xml:space="preserve">
    <value>Wait for Keyboard</value>
  </data>
  <data name="activity_sendkey_waitforkeyboard_help" xml:space="preserve">
    <value>If true, will wait for keyboard to be unlocked before sending key</value>
  </data>
  <data name="activity_sendtext" xml:space="preserve">
    <value>Send Text</value>
  </data>
  <data name="activity_sendtext_text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="activity_sendtext_text_help" xml:space="preserve">
    <value>The text to send to the terminal</value>
  </data>
  <data name="activity_sendtext_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_sendtext_timeout_help" xml:space="preserve">
    <value>How long to wait for the text to appear</value>
  </data>
  <data name="activity_sendtext_tooltip" xml:space="preserve">
    <value>Send text to terminal</value>
  </data>
  <data name="activity_sendtext_waitforkeyboard" xml:space="preserve">
    <value>Wait for Keyboard</value>
  </data>
  <data name="activity_sendtext_waitforkeyboard_help" xml:space="preserve">
    <value>If true, will wait for keyboard to be unlocked before sending text</value>
  </data>
  <data name="activity_settext" xml:space="preserve">
    <value>Set Text</value>
  </data>
  <data name="activity_settext_field" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="activity_settext_field_help" xml:space="preserve">
    <value>Field index to set text for</value>
  </data>
  <data name="activity_settext_text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="activity_settext_text_help" xml:space="preserve">
    <value>Text to assign to field</value>
  </data>
  <data name="activity_settext_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_settext_timeout_help" xml:space="preserve">
    <value>Set Text will wait this long, for a field with this index to appear</value>
  </data>
  <data name="activity_settext_tooltip" xml:space="preserve">
    <value>Set text to specefied field in a Terminal Session</value>
  </data>
  <data name="activity_settext_waitforkeyboard" xml:space="preserve">
    <value>Wait for Keyboard</value>
  </data>
  <data name="activity_settext_waitforkeyboard_help" xml:space="preserve">
    <value>If true, will wait for keyboard to be unlocked before setting text</value>
  </data>
  <data name="activity_terminalsession" xml:space="preserve">
    <value>Terminal Session</value>
  </data>
  <data name="activity_terminalsession_hideui" xml:space="preserve">
    <value>Hide UI</value>
  </data>
  <data name="activity_terminalsession_hideui_help" xml:space="preserve">
    <value>Hide terminal UI while running</value>
  </data>
  <data name="activity_terminalsession_hostname" xml:space="preserve">
    <value>Hostname</value>
  </data>
  <data name="activity_terminalsession_hostname_help" xml:space="preserve">
    <value>Hostname or IP of Mainframe to connnect to</value>
  </data>
  <data name="activity_terminalsession_port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="activity_terminalsession_port_help" xml:space="preserve">
    <value>Port number of mainframe to connect to</value>
  </data>
  <data name="activity_terminalsession_termtype" xml:space="preserve">
    <value>TermType</value>
  </data>
  <data name="activity_terminalsession_termtype_help" xml:space="preserve">
    <value>Terminal type to repport to the mainframe ( and the type of mainframe parser to use )</value>
  </data>
  <data name="activity_terminalsession_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_terminalsession_timeout_help" xml:space="preserve">
    <value>Connection Timeout</value>
  </data>
  <data name="activity_waitfortext" xml:space="preserve">
    <value>Wait For Text</value>
  </data>
  <data name="activity_waitfortext_found" xml:space="preserve">
    <value>Found</value>
  </data>
  <data name="activity_waitfortext_found_help" xml:space="preserve">
    <value>If text was found before timeout, returns True</value>
  </data>
  <data name="activity_waitfortext_text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="activity_waitfortext_text_help" xml:space="preserve">
    <value>Text to look for</value>
  </data>
  <data name="activity_waitfortext_throw" xml:space="preserve">
    <value>Throw</value>
  </data>
  <data name="activity_waitfortext_throw_help" xml:space="preserve">
    <value>Throw exception if text was not found</value>
  </data>
  <data name="activity_waitfortext_timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="activity_waitfortext_timeout_help" xml:space="preserve">
    <value>How long to wait for the text to appear</value>
  </data>
  <data name="activity_waitfortext_tooltip" xml:space="preserve">
    <value>Wait for Text to appear somewhere on terminal screen</value>
  </data>
  <data name="plugin_auto_close" xml:space="preserve">
    <value>Auto close</value>
  </data>
  <data name="plugin_auto_close_help" xml:space="preserve">
    <value>After workflow completes or fails, auto close all terminal sessions ( usefull to disable doing development )</value>
  </data>
</root>